(*Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal 
and D = |Pk − Pj| is minimised; what is the value of D?*)










let pentagonalnumbers = Seq.unfold (fun x-> Some(((3UL*x-1UL)*x)/2UL,x+1UL)) 1UL
let pentagonaldifferences = Seq.unfold (fun x-> Some(3UL*x + 1UL,x+1UL)) 1UL
let ispentagonal (x : uint64) = ((sqrt (24.0* (float x)  + 1.0) + 1.0) / 6.0) % 1.0 = 0.0

Seq.find ispentagonal pentagonaldifferences


//////////////////////////////////////////////////////////////




let isdivisible number = List.map (fun x-> number % x = 0) [2;3;5] |> Seq.exists ((=)true) |> not
[1 .. 100] |> List.filter isdivisible



isdivisible 20

// put in the index and how many forward or backward you want to jump and it will compute the difference
let ndifference index n = ((index + n) * (3*(index + n ) - 1) / 2) - (index * (3*index - 1) / 2)



let pentagonalnumbers = Seq.unfold (fun x -> Some(x*(3*x-1)/2,x+1)) 1 |> Seq.cache
let pentagonalnumbers window = 
let pentagonaltuples = Seq.unfold (fun (x,_) -> Some((x,x*(3*x-1)/2),(x+1,0))) (1,1) |> Seq.cache

let firstdifferences = pentagonalnumbers |> Seq.map ndifference
// This returns a tuple value with the index jumped to and the difference away from sequence indices
let difference (x,v) n = (x+n,((x + n) * (3*(x + n ) - 1) / 2) - (x * (3*x - 1) / 2))



